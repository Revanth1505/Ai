TSP USING HILL CLIMBING 
import random
import math

def d(c1, c2):
    return math.sqrt((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2)
def t_d(tour, cities):
    return sum(d(cities[tour[i]], cities[tour[i + 1]]) for i in range(len(tour) - 1)) + d(cities[tour[-1]], cities[tour[0]])

def tsp(cities, iterations=1000):
    tour = list(range(len(cities)))
    c_d = t_d(tour, cities)

    for _ in range(iterations):
        i, j = random.sample(range(len(cities)), 2)
        tour[i], tour[j] = tour[j], tour[i]
        n_d = t_d(tour, cities)

        if n_d < c_d:
            c_d = n_d




        else:
            tour[i], tour[j] = tour[j], tour[i]

    return tour, c_d

# Example usage:
if __name__ == "__main__":
    cities = [[0, 0], [1, 5], [3, 2], [5, 8], [6, 3], [7, 9]]
    best_tour, best_distance = tsp(cities)
    print("Best Tour:", best_tour)
    print("Best Distance:", best_distance)



A* ALGORITHM
import heapq

def astar(graph, start, goal, heuristic):
    open_list, came_from, g_score = [(0, start)], {}, {node: float('inf') for node in graph}
    g_score[start] = 0

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current:
                path.append(current)
                current = came_from.get(current)
            return path[::-1]

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score.get(neighbor, float('inf')):
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                heapq.heappush(open_list, (tentative_g_score + heuristic(neighbor, goal), neighbor))

    return None

# Example usage:
if __name__ == "__main__":
    graph = {
        'A': {'B': 6, 'F': 3},
        'B': {'A': 6, 'C': 3, 'D': 2},
        'C': {'B': 3, 'D': 1, 'E': 5},
        'D': {'B': 2, 'C': 1, 'E': 8},
        'E': {'C': 5, 'D': 8, 'I': 5, 'J': 5},
        'F': {'A': 3, 'G': 1, 'H': 7},
        'G': {'F': 1, 'I': 3},
        'H': {'F': 7, 'I': 2},
        'I': {'E': 5, 'G': 3, 'H': 2, 'J': 3}
    }

    start_node, goal_node = 'A', 'J'

    heuristic = lambda node, goal: 0  # Replace with an actual heuristic

    optimal_path = astar(graph, start_node, goal_node, heuristic)
    
    if optimal_path:
        print("Optimal Path:", optimal_path)
    else:
        print("No path found.")


MIN MAX ALGORITHM

import math

def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
    if curDepth == targetDepth:
        return scores[nodeIndex]
    
    if maxTurn:
        return max(minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth),
                   minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth))
    
    return min(minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth),
               minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth))

scores = [3, 5, 2, 9, 12, 5, 23, 23]
treeDepth = math.log2(len(scores))

print("The optimal value is:", minimax(0, 0, True, scores, treeDepth))




GRAPH COLORING

def g_c(graph):
    colors = {}
    color_names = ["Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Cyan", "Magenta"]

    for node in graph:
        n_c = {colors[n] for n in graph[node] if n in colors}
        a_c = [color for color in color_names if color not in n_c]

        if a_c:
            colors[node] = a_c[0]
        else:
            # If all colors are used by neighbors, assign a new color
            new_color = color_names[len(colors) % len(color_names)]
            colors[node] = new_color

    return colors

# Example usage:
if __name__ == "__main__":
    graph = {
        '0': ['1', '2'],
        '1': ['0', '2', '3'],
        '2': ['0', '1', '3'],
        '3': ['1', '2'],
    }

    coloring = g_c(graph)

    print("Vertex\tColor")
    for node, color in coloring.items():
        print(f"{node}\t{color}")



